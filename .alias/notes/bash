============================================================
# conditional one-liners:
	askphrase "weiter?" || echo ne && echo jo
	weiter? (Y|n)? Y
	jo

	weiter? (Y|n)? n
	ne
	jo

	askphrase "weiter?" && echo jo || echo ne 
	weiter? (Y|n)? Y
	jo

	weiter? (Y|n)? n
	ne
============================================================
# function to ask for yes or no
printf "[Y/n]\n"
read -s -n 1 key
if [[ "$key" != "" && "$key" != "y" && "$key" != "Y" ]]
then
	exit 1
fi

# better one
askphrase ()
{
    phrase="$1"
    default=$2

    if [ -z $default ]
    then
        default=y
    fi

    printf "%s " "$phrase"
    if [ "$default" = "y" ]
    then
        printf "(Y|n)? "
    else
        printf "(y|N)? "
    fi

    read answer

    if [ -z $answer ]
    then
        answer=$default
    fi

    case $answer in
        y|Y)
            return 0
            ;;
        n|N)
            return 1
            ;;
        *)
            askphrase "$phrase" "$default"
            ;;
    esac
}
============================================================
print a string n times
	printf "%.s<string>" {1..n}
http://stackoverflow.com/questions/5799303/print-a-character-repeatedly-in-bash
============================================================
print shell-var lowercase
	echo ${var~}
print shell-var uppercase
	echo ${var^^}
============================================================
print many files, with filename above:
	tail -n +1 file1 file2 file3
============================================================
remove suspicious windows carriage return characters with
sed:
	sed -i -e '/s\r//' <filename>
============================================================
if-conditions
tests:
	-f		file existing?
	-d 		directory existing?
	String		String not empty?
	String1 (!)= String2
	   		Strings similar?
	-n		String is not empty
	-z		String is empty
	N1 -eq N2	N1 equals N2
	N1 -ne N2	N1 not equal N2
	N1 -ge N2	N1 greater equal N2
	N1 -gt N2	N1 greater than N2
	N1 -le N2	N1 less equal N2
	N1 -lt N2	N1 less than N2

when comparing strings, its useful to write the parameter in
quotation marks, like this:
	if [ "$1" = "string" ]
		then ...
============================================================
misc:
	basename	strip dir and suffix from filename
	filename=$(basename "$fullfile")
	extension="${filename##*.}"
	filename="${filename%.*}"

